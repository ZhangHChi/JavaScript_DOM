1.我们在浏览器看到的网页其实是由以下三层信息构成的一个共同体。
          ①结构层:网页的结构层由HTML或XHTML之类的标记语言负责创建。标签<tag>也就是那些尖括号里的单词，对网页内容的语义含义做出了描述。例如:<p>An example of a paragraph</p>
		  ②表示层:由CSS负责完成。CSS描述页面内容应该如何呈现。你可以定义这样一个CSS来声明:“文本段应该使用灰色的Arial字体和另外几种sans-serif字体来显示”。例如:p{color:grey;font-family:"Arial",sans-serif;}
		  ③行为层:行为层负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域。例如:“当用户点击一个文本段落时，显示一个alert对话框”。
		  var paras = document.getElementsByTagName("p");
		  for(i=0;i<paras.length;i++){
		  paras[i].onclick = function(){
		  alert("You clicked on a paragraph");
		    }
		  }
		  网页的表示层和行为层总是存在的，即使未明确地给出任何具体的指令也是如此。
2.在所有的产品设计活动中，选择最适用的工具去解决问题是最基本的原则。具体到网页设计工作，这意味着:
          ①使用(X)HTML去搭建文档的结构。
		  ②使用CSS去设置文档的呈现效果。
		  ③使用DOM脚本去实现文档的行为。
		  这三种技术之间存在着一些重叠的区域，用DOM可以改变网页的结构，例如createElement和appendChild之类的允许你动态的创建和添加标记。在CSS上也有这种技术相互重叠的例子。诸如:hover和:focus之类的伪类允许你根据用户触发事件改变元素的呈现效果。
3.文档中的每个元素都是一个对象，每个对象又有着各种各样的属性。文档的每个元素节点都还有一个属性style。style属性包含着元素的样式，查询这个属性将返回一个对象而不是一个简单的字符串。样式都存放在这个style对象的属性里面。
          ①例如输出一个属性值:alert("This font-family is "+para.style.fontFamily);要记得输出字符串记得加上引号，且用+号连接起来。遇到属性名称很长的需要用驼峰命名法来表示它们。
		  ②DOM在表示样式属性的时候采用的单位并不总是与它们在CSS样式表里的设置相同。例如把color:gray;改成color:#999;再在script输出alert("This color is "+para.stylr.color);在有些浏览器color的属性会以RGB格式的颜色值(153,153,153)返回。还好这类例外情况不多，绝大部分样式属性的返回值与它们的设置值都采用同样的计量单位。
		  ③通过style属性获取样式有很大局限性，style属性只能返回内嵌样式。换句话说就是只有把CSS style属性插入到标记里，才可以用DOM style属性去查询那些信息。在外部样式表里声明是样式不会进入style对象，在文档的<head>部分里声明的样式也是如此。style对象只包含在HTML代码里用style属性声明的样式。但这几乎没有使用价值，因为样式应该与标记分开。
		  ④许多DOM属性是只读的，我们只能用它来获取信息，但不能用它们来设置或更新信息。但是凡是无绝对，style对象的各个属性就都是可读写的。我们不仅可以通过某个元素的style属性去获取样式，还可以通过它去更新样式。记得style对象的属性的值必须放在引号里，单引号或双引号都可以。(如果忘记了使用引号，JavaScript会把等号右边的值解释为一个变量)
4.通过CSS声明样式的具体做法主要有三种:
          ①第一种是为标签元素统一的声明样式。
		  ②第二种是为有特定class属性的所有元素统一声明样式。
		  ③第三种是为独一无二的id属性的元素单独声明样式。
		  还有类似属性的多个元素声明样式而且在现代浏览器中甚至可以根据元素的位置声明样式。CSS引入了很多与位置相关的选择器，我们可以利用DOM轻而易举地找出文档中的目标元素，然后轻而易举的紧跟目标元素并把样式添加给目标元素的后面那个元素。
5.只要有可能，最好选用CSS为文档设置样式。根据最简单实现的方法来选择使用那种方法。伪类:hover已经得到了绝大多数浏览器的支持——至少在它被用来改变链接的样式时是如此。
6.与其使用DOM直接改变某个元素的样式，不如通过JavaScript代码去更新这个元素的class属性。使用className属性可以解决这个问题，