1. 平稳退化:确保网页在没有JavaScript的情况下也能正常工作。
           ①css技术的最大优点是它能帮你将web文档的内容结构(标记)和版面设计(样式)分离开来。作为css技术的突出优点，文档结构与文档样式的分离可以确保网页能够平稳退化。
		   ②”标记良好的内容就是一切“。所谓”渐进增强“就是用一些额外的信息层去包裹原始数据。按“渐进增强”原则创建出来的网页几乎都符合“平稳退化”原则。(比如为css控制内容的表示效果)显然把css代码从HTML文档里福利出来可以让css工作更好。这个结论同样也适用于JavaScript行为层。
2.分离JavaScript:把网页结构和内容与JavaScript脚本的动作行为分开。
		   ①JavaScript代码基本都在外部文件里，问题出在HTML内嵌的事件处理函数上，类似于style属性，在HTML文档中使用诸如onclick之类的属性也是一种没有效率又容易引发问题的做法。JavaScript语言不要求事件必须在HTML文档里处理，我们可以在外部JavaScript文件里把一个事件添加到HTML文档中的某个元素上。
		   ②通过class和id属性可以把要添加到HTML文档中的事件的元素确定下来。想把一个事件添加到某个带有特定id属性的元素上用getElementById就行了:getElementById(id).event=action。如果涉及多个元素，我们可以用getElementsByTagName和getAttribute吧事件添加到有着特定属性的一组元素上。具体步奏:1.把文档里的所有链接全放入一个数组里。2.遍历数组。3.如果某个链接的class属性等于popUp，就表示这个链接在被点击时应该调用popUp()函数。于是A.把这个链接的href属性值传递给popUp()函数。B.取消这个连接的默认行为，不让这个链接把访问者带离当前窗口。
		   var links = document。getElementsByTagName("a");
		   for(var i=0;i<links.length;i++){
		   if(links[i].getAttribute("class")=="popUp"){
		   links[i].onclick=function(){
		   popUp(this.getAttribute("href"));
		   return false;
		   }                                        《《《就是点击链接不跳转页面。直接打开一个指定大小的页面在当前页面上。》》》
		   }             
		   }以上代码把将要调用的popUp()函数的onclick事件添加到有关链接上。要是直接把这段代码存入到外部JavaScript文件，他将无法运行。因为第一句直接定义将在JavaScript文件被加载时立刻执行。如果JavaScript文件在<head>部分用<script>调用，他将在HTML文件之前加载到浏览器里，反之要是在底部</body>之前调用，就不能保证那个文件最先结束加载。因为脚本加载完文档可能不完整。
		   ③必须让这些代码在HTML文档加载完之后开始执行。因为HTMl文档全部加载完成时会触发一个事件，这个事件有它自己的事件处理函数。文档被加载到一个浏览器窗口里，document对象又是window对象的一个属性。当浏览器对象触发onload事件时，document对象已经存在。所以只要把JavaScript代码打包在一个函数如prepareLinks里面，并把这个函数添加到window对象的onload事件上去，这样就可以正常工作了。
3.向后兼容:确保老的版本的浏览器不会因为你的JavaScript脚本而死掉。
           ①不同浏览器对于JavaScript的支持程度不一样。比较老的浏览器可能无法理解DOM提供的方法和属性。最简单的解决方法是检查浏览器对JavaScript的支持程度。只要把某个方法打包在一个if语句里，就可以根据这个if语句的条件表达式的求值结果是ture或false来决定该怎么做。这种检测称为对象检测。
		   ②在使用对象检测时，一定要删掉方法名后面的圆括号。把测试条件改成如果你不理解请离开更简单点。if(!method) return false;。这么做是为了让脚本有良好的向后兼容性。
		   ③对象检测并不是唯一的办法，浏览器嗅探技术也曾非常流行。“浏览器嗅探”指通过提取浏览器供应商提供的信息来解决向后兼容问题。但是因为复杂和浏览器会错误报告版本等等各种问题渐渐被淘汰。
4.性能考虑:确定脚本执行的性能最优。
           ①很多人会忽视脚本对web应用整体性能的影响。为保证应用流畅地运行，在为文档编写和应用脚本时，需要注意到尽量少访问DOM和尽量减少标记。
		   ②脚本在标记中的位置对页面的初次加载时间也有很大影响。一般来说我们把脚本放在文档的<head>区域，这种放置有一个问题，位于<head>块中的脚本会导致浏览器无法并行加载其它文件如图片或其它脚本。所以把所有<scriot>标签都放在文档的末尾，</body>标签之前就能让页面变得更快。
		   ③写完脚本做了优化也放到了适当的位置，还可以压缩脚本文件来加快加载速度。所谓压缩脚本指的是把脚本文件中不必要的字节，如空格和注释统统删除，从而达到“压缩”文件的目的。